---
- include: verify-env.yml

- hosts: all
  serial: 8
  gather_facts: no
  connection: local
  vars:
    nova_compute_state: present
  tasks:
    - nova_compute:
        name: "{{ inventory_hostname }}"
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ lookup('env', 'OS_USERNAME') }}"
        login_password: "{{ lookup('env', 'OS_PASSWORD') }}"
        login_tenant_name: "{{ os_tenant_name }}"
        key_name: "{{ ansible_ssh_key }}"
        image_name: "{{ os_image_name }}"
        flavor_ram: "{{ os_flavor_ram }}"
        flavor_include: "{{ os_flavor_include }}"
        nics:
          - net-id: "{{ os_net_id }}"
        security_groups: "{{ security_group }}"
        state: "{{ nova_compute_state }}"
        meta: "{{ host_metadata | default() }}"
      always_run: yes
      register: host
      tags: host

    - name: set ansible_ssh_host value to host private_ip
      set_fact:
        ansible_ssh_host: "{{ host.private_ip }}"
      always_run: yes
      when: nova_compute_state == "present"
      tags: host

    - name: print host ip address
      debug:
        msg: "{{ ansible_ssh_host }}"
      always_run: yes
      when: nova_compute_state == "present"
      tags: host

    - name: wait for host boot
      local_action:
        module: wait_for
        host: "{{ ansible_ssh_host }}"
        port: 22
        search_regex: OpenSSH
        delay: "{{ boot_wait | default(60) }}"
        timeout: 120
        state: started
      always_run: yes
      when: host.changed and nova_compute_state == "present"
      tags: host

- hosts: data_nodes
  gather_facts: no
  vars:
    nova_compute_state: present
  tasks:
    - name: Check whether we need to attach another external storage
      shell: ls -l /dev | awk '{print $10}' | egrep '^vd[a-z]$' | grep -v 'vda' | head -n1
      register: external_storage
      when: nova_compute_state == "present"
      tags: host

    - name: Attach an external storage
      connection: local
      nova_volume:
        name: "{{ inventory_hostname }}-storage"
        server: "{{ inventory_hostname }}"
        auth_url: "{{ os_auth_url }}"
        login_username: "{{ lookup('env', 'OS_USERNAME') }}"
        login_password: "{{ lookup('env', 'OS_PASSWORD') }}"
        login_tenant_name: "{{ os_tenant_name }}"
        device_name: "/dev/vdb"
        size: "{{ storage_size }}"
        state: "{{ nova_compute_state }}"
      when: (nova_compute_state == "absent" or external_storage.stdout == '') and storage_size is defined and storage_size > 0
      tags: host

- hosts: localhost
  gather_facts: no
  vars:
    nova_compute_state: present
  tasks:
    - name: Create list of newly provisioned hosts to merge with local /etc/hosts file
      local_action:
        module: lineinfile
        dest: "{{ playbook_dir }}/../hosts.merge"
        regexp: ".+ {{ item }}$"
        line: "{{ hostvars[item].get('ansible_ssh_host') }} {{ item }}"
        state: "{{ nova_compute_state }}"
        create: True
      when: nova_compute_state == "absent" or hostvars[item].ansible_ssh_host is defined
      with_items: groups['all']
      tags: host
