---
- name: Create Hadoop HDFS name node directories
  sudo: true
  file:
    path: "/dfs/nn"
    owner: hdfs
    group: hdfs
    state: directory
  register: created_hdfs_namenode_data_dir
  tags:
    - hdfs

- name: Downloading pub key
  sudo: true
  sudo_user: hdfs
  fetch: 
    src: "/home/hdfs/.ssh/id_rsa.pub"
    dest: "/tmp/id_rsa.pub"
    flat: yes
  register: fetch_public_key
  tags:
    - hdfs

- name: Spread authorization key
  sudo_user: hdfs
  sudo: true
  authorized_key:
    user: hdfs
    key: "{{ lookup('file', '/tmp/id_rsa.pub') }}"
    state: present
  tags:
    - hdfs

- name: Create HDFS slaves files
  sudo: true
  template:
    src: "slaves.j2"
    dest: "{{ hdfs_conf_dir }}/slaves"
  tags:
    - hdfs

- name: Format HDFS name node data directories
  sudo_user: hdfs
  sudo: true
  shell: source /etc/profile.d/hadoop.sh; hdfs namenode -format
  when: created_hdfs_namenode_data_dir|changed
  tags:
    - hdfs

- name: Restart Hadoop HDFS name node
  sudo: true
  sudo_user: hdfs
  shell: source /etc/profile.d/hadoop.sh; hadoop-daemon.sh stop namenode; hadoop-daemon.sh start namenode
  tags:
    - hdfs

- name: Wait until HDFS name node leaves the safe mode
  sudo: true
  sudo_user: hdfs
  shell: source /etc/profile.d/hadoop.sh; until [ "`hdfs dfsadmin -safemode get`" == "Safe mode is OFF" ]; do sleep 10; done
  tags:
    - hdfs

- name: Setup initial directories on HDFS
  run_once: true
  sudo_user: hdfs
  sudo: true
  shell: source /etc/profile.d/hadoop.sh; if ! hdfs dfs -test -d /tmp; then hdfs dfs -mkdir /tmp; fi; hdfs dfs -chmod 777 /tmp; if ! hdfs dfs -test -d /user; then hdfs dfs -mkdir -p /user; fi; if ! hdfs dfs -test -d /apps; then hdfs dfs -mkdir -p /apps; fi; if ! hdfs dfs -test -d /logs; then hdfs dfs -mkdir -p /logs; fi
  tags:
    - hdfs

- name: Create home directory for the default Linux user on HDFS
  run_once: true
  sudo_user: hdfs
  sudo: true
  shell: source /etc/profile.d/hadoop.sh; if ! hdfs dfs -test -d /user/{{ ansible_user_id }}; then hdfs dfs -mkdir -p /user/{{ ansible_user_id }}; fi; hdfs dfs -chown {{ ansible_user_id }} /user/{{ ansible_user_id }}
  tags:
    - hdfs

- name: Create home directories for other users on HDFS
  run_once: true
  sudo_user: hdfs
  sudo: true
  shell: source /etc/profile.d/hadoop.sh; if ! hdfs dfs -test -d /user/{{ item.name }}; then hdfs dfs -mkdir -p /user/{{ item.name }}; fi; hdfs dfs -chown {{ item.name }} /user/{{ item.name }}
  when: item.enabled is defined and item.enabled == 1
  with_items: users
  tags:
    - hdfs
